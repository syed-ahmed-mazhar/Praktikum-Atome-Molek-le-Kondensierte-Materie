Bandbreite
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

O =np.array([1,2,3,4,5])
dO=np.array([1,2,3,4,5])
U =np.array([1,2,3,4,5])
dU=np.array([1,2,3,4,5])

G = O/U

G    =np.array([1,3,5,3,0])#data
G_err=np.array([0.5]*5)
f    =np.array([2,8,20,80,200,800,2000,8000,20000,80000,200000,800000,2000000,8000000])
f_err=np.array([0.3]*5)

Y=G
Y_err= G_err
X = np.log(f)
X_err =1/f * f_err

fig, ax = plt.subplots(figsize = (16,9)) #
ax.errorbar(X,Y, xerr=X_err, yerr=Y_err ,marker=".",linestyle="none" ,color="blue")
#minor_ticks_top=np.linspace(0,30,31)
#ax.set_xticks(minor_ticks_top,minor=True)
#ax.set_yticks(minor_ticks_top,minor=True)
ax.grid()
ax.grid(which='minor')
ax.set_xlabel('log(f)')
ax.set_ylabel('Verstärkung G')#Achsen beschriften
#ax.legend()#legende einfügen
ax.tick_params(axis='x', labelrotation=30)# Skalen der x achse rotieren
plt.savefig('a.jpg', dpi = 500)


##############################################################################################
from kafe2 import XYContainer, Fit, Plot


def linearf(x,l,h, b):# Our first model is a simple linear function
     return (1+(x/l)**4)**(-1/2) * (x/h)**2*(1+(x/h)**4)**(-1/2) + b
def linfit(x_data, y_data, x_err, y_err): # funktion mit den datn als argumenten erstellen
    xy_data = XYContainer(x_data=X,y_data=Y)
    xy_data.add_error(axis='x', err_val=X_err)# felher hinzufügen
    xy_data.add_error(axis='y', err_val=Y_err)
    xy_data.axis_labels = ( 'log(f)','Verstärkung G')
    lin_fit = Fit(data=xy_data, model_function=linearf)# Objekt mit dem xy- Behälter und der linearen Funkrion erzeugen
    fit_results = lin_fit.do_fit() # ergebnisse bestimmen und später ausgeben lassen
    #linear_fit.report()
    plot = Plot(fit_objects=lin_fit) 
    plot.plot()
    plt.savefig('425.Glogf.jpg', dpi = 300)
    plt.show()
    return fit_results

print(linfit(X, Y, X_err, Y_err)['parameter_cov_mat'])# Ergebnisse in der Kovarianzmatrix ausgeben lassen

#################################################################################################
Schrotrauschen
Abh. von I
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

Um =np.array([1,2,3,4,5])#Spannung Meter 2
dUm =np.array([1,2,3,4,5])
G =np.array([1,2,3,4,5])# Verstärkung 
dG =np.array([1,2,3,4,5])


Ub=np.array([1,2,3,4,5])#Spannung Monitor 1
dUb =np.array([1,2,3,4,5])

R=10000# widerstand Rf
dR=


I=(Um*10)/((100*G*R)**2)# gemittelter Strom Ende
dI=np.sqrt( (dUm*10/((100 * G * R)**2)   )**2 + (  (Um*10)/((100*R)**2 * G**3 ) *dG )**2 + (  (Um*10)/((100*G)**2 * R**3 ) *dR )**2  )

idr=Ub/R# Strom Anfang
didr=np.sqrt((dUb/R)**2+(Ub*dR/(R**2))**2)

Y=I
Y_err= dI
X = idr
X_err = didr

fig, ax = plt.subplots(figsize = (16,9)) #
ax.errorbar(X,Y, xerr=X_err, yerr=Y_err ,marker=".",linestyle="none" ,color="blue")
#minor_ticks_top=np.linspace(0,30,31)
#ax.set_xticks(minor_ticks_top,minor=True)
#ax.set_yticks(minor_ticks_top,minor=True)
ax.grid()
ax.grid(which='minor')
ax.set_xlabel('i_dc')
ax.set_ylabel('delta i ')#Achsen beschriften
#ax.legend()#legende einfügen
ax.tick_params(axis='x', labelrotation=30)# Skalen der x achse rotieren
plt.savefig('a.jpg', dpi = 500)
###########################################################################################
from kafe2 import XYContainer, Fit, Plot


def linearf(x,ef, c):# Our first model is a simple linear function
     return 2*ef*x + c
def linfit(x_data, y_data, x_err, y_err): # funktion mit den datn als argumenten erstellen
    xy_data = XYContainer(x_data=X,y_data=Y)
    xy_data.add_error(axis='x', err_val=X_err)# felher hinzufügen
    xy_data.add_error(axis='y', err_val=Y_err)
    xy_data.axis_labels = ( 'log(f)','Verstärkung G')
    lin_fit = Fit(data=xy_data, model_function=linearf)# Objekt mit dem xy- Behälter und der linearen Funkrion erzeugen
    fit_results = lin_fit.do_fit() # ergebnisse bestimmen und später ausgeben lassen
    #linear_fit.report()
    plot = Plot(fit_objects=lin_fit) 
    plot.plot()
    plt.savefig('425.Glogf.jpg', dpi = 300)
    plt.show()
    return fit_results

print(linfit(X, Y, X_err, Y_err)['parameter_cov_mat'])# Ergebnisse in der Kovarianzmatrix ausgeben lassen
